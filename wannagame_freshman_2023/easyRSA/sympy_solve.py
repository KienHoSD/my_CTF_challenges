from sympy import *
from Crypto.Util.number import long_to_bytes

c = 3778334964020085693122279865085669931544565594340822345918989508952697153279656102136896766069941711654206670695651429514092145744418890327941850114654449578138707810321552701030453820757236624767312202504750622959336960778419511800007797894081002357542180182105523582777650174695635469165347460411204007947912540366848738081190639561262267609709489546444644666346330477076696996699487362844232320060737648554287501932392681294728341607571792807384910146769288304726543715115373869342606973465866039825063286085254744403580981503955159533367921918990386586002820616696289107796591370087382822623875066545105848859819
hint1 = 20978135329472294939914714948198369484813382661367102444419294293577936274622454399412643333395069230540445488817871514639266385242274229865025904807357796
hint2 = 107283957759499663953333972940428532630825517639279168870550288698510570747194633174133941850038669632558664539532901591228896545932212704369190692506696118889217688783240077805671896860608066777266155415930965012190554894872594664088620308010376579887314084964024069034816205917207469185957050769629280580688
e = 65537

p, q = symbols ('p q')
f1 = p + q - hint1
f2 = p*q - p - q + 1 - hint2
pq = solve([f1,f2], [q, p])

# because p and q can change place, it will return 2 solution with the same result
# be awared of the type of the result by reading log! change it to python 'int'
p = int(pq[0][0])
q = int(pq[0][1])

# check p and q
print(p)
print(q)
assert p+q == hint1, "Wrong p and q"
assert p*q - p - q + 1 == hint2, "Wrong p and q"

# calculating phi,d,n and get flag!
phi = (p-1)*p*(q-1)*q 
d = pow(e,-1,phi)
n = p*p*q*q
print('Flag',long_to_bytes(pow(c,d,n)))

